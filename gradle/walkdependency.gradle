

task walkDependencyGraph(type: DependencyGraphWalk) {
    dependsOn configurations.uploadElements
}

class DependencyGraphWalk extends DefaultTask {
    @TaskAction
    void walk() {
        Configuration configuration = project.configurations.uploadElements
        ResolutionResult resolutionResult = configuration.incoming.resolutionResult
        ResolvedComponentResult root = resolutionResult.root
        logger.quiet configuration.name
        traverseDependencies(0, root.dependencies)
    }

    private void traverseDependencies(int level, Set<? extends DependencyResult> results) {
        for (DependencyResult result : results) {
            if (result instanceof ResolvedDependencyResult) {
                ResolvedComponentResult componentResult = result.selected
                ComponentIdentifier componentIdentifier = componentResult.id
                String node = calculateIndentation(level) + "- $componentIdentifier.displayName ($componentResult.selectionReason)"
                logger.quiet node
                traverseDependencies(level + 1, componentResult.dependencies)
            } else if (result instanceof UnresolvedDependencyResult) {
                ComponentSelector componentSelector = result.attempted
                String node = calculateIndentation(level) + "- $componentSelector.displayName (failed)"
                logger.quiet node
            }
        }
    }

    private String calculateIndentation(int level) {
        '     ' * level
    }
}


